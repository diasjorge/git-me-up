#!/bin/sh
#
# Author: Graham Ashton <graham@effectif.com>

BRANCH="${BRANCH:-work}"

## Functions

log()
{
    echo "$(basename $0): $1"
}

usage()
{
    echo "Usage: $(basename $0) <svn-repository> <local-dir>" 1>&2
    exit 1
}

check_for_local_dir()
{
    local dir="$1"
    if [ -e "$dir" ]; then
        echo "$(basename $0): ERROR: $dir already exists - please move it!" 1>&2
        exit 1
    fi
}

get_latest_revision()
{
    local repo="$1"
    svn log "$repo" | sed -n "2p" | cut -f 1 -d " "
}

ignore_generated_files()
{
    log "setting ignored files (from subversion; this can take a while)"
    git svn show-ignore >> $GIT_EXCLUDE
    echo ".gitignore" >> $GIT_EXCLUDE
}

clone_repository()
{
    local svn_repo="$1"
    local local_repo="$2"
    
    log "finding latest revision of $svn_repo"
    local revision=$(get_latest_revision "$svn_repo")
    
    log "creating git repository in $(pwd)/$local_repo"
    local empty_dirs=$(git svn clone -$revision $svn_repo $local_repo 2>&1 | \
        grep "W: +empty_dir:" | cut -f 3 -d " ")
    local dir
    for dir in $empty_dirs; do
        log "making empty directory: $dir"
        mkdir -p "$local_repo/$dir"
    done
    
    pushd "$local_repo" >/dev/null
    ignore_generated_files
    popd >/dev/null
}

clone_external_plugins()
{
    log "checking for plugins installed with svn:externals"

    local plugin_dir="../plugins"
    mkdir -p "$plugin_dir"
    pushd "$LOCAL_REPO" >/dev/null
    
    local line plugin svn_repo
    export IFS=$(echo -e "\n")  # iterate over lines, not words
    for line in $(svn propget svn:externals "$SVN_REPO/vendor/plugins"); do
        plugin=$(echo $line | cut -f 1 -d " ")
        if [ ! -e "$plugin_dir/$plugin" ]; then
            svn_repo=$(echo $line | cut -f 2 -d " ")
            clone_repository "$svn_repo" "$plugin_dir/$plugin"
        fi
        log "adding submodule: $LOCAL_REPO/vendor/plugins/$plugin"
        git submodule add "$plugin_dir/$plugin" "vendor/plugins/$plugin"
        echo "/vendor/plugins/$plugin" >> "$GIT_EXCLUDE"
    done
    unset IFS
    
    git submodule init
    git submodule update
    echo .gitmodules >> "$GIT_EXCLUDE"
    
    popd >/dev/null
}

create_working_branch()
{
    local local_repo="$1"
    log "creating '$BRANCH' branch on $(pwd)/$local_repo"
    pushd "$local_repo" >/dev/null
    git checkout -b "$BRANCH"
    popd >/dev/null
}

## Main program

[ -n "$DEBUG" ] && set -x

SVN_REPO="$1"
LOCAL_REPO="$2"
[ -z "$SVN_REPO" -o -z "$LOCAL_REPO" ] && usage
GIT_EXCLUDE="$(pwd)/$LOCAL_REPO/.git/info/exclude"

check_for_local_dir "$LOCAL_REPO"
clone_repository "$SVN_REPO" "$LOCAL_REPO"
if [ -e "$LOCAL_REPO/vendor/plugins" ]; then
    clone_external_plugins
fi
create_working_branch "$LOCAL_REPO"
